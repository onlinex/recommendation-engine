name: api-ci
# trigger by pull request to main for the chainges in the *app directory
on:
  pull_request:
    paths:
      - .github/workflows/api-ci.yaml
      - app/**
    branches:
      - main

  # only rebuild on change in the app
  push:
    paths:
      - .github/workflows/api-ci.yaml
      - app/**
    branches:
      - main

jobs:
  # check k8s configurations
  k8sPolicyCheck:
    if: ${{ github.event_name == 'pull_request' }} # came from the pull_request
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Run Datree Policy Check
        continue-on-error: true
        uses: datreeio/action-datree@main
        with:
          path: '**/*.yaml'
          cliArguments: '--only-k8s-files --ignore-missing-schemas'
      - 
        name: Run SUCCESS script
        run: exit 0
    
  # build
  build:
    needs: [k8sPolicyCheck]
    runs-on: ubuntu-latest
    steps:
      - # checks-out our repository under $GITHUB_WORKSPACE, so our workflow can access it.
        name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}   # checkout the source branch of the pull request in a workflow run
          fetch-depth: 0                # fetch the whole repo history
      - 
        name: Git Version
        uses: codacy/git-version@2.5.4
        id: gitVersion
        with:
          release-branch: main
          #dev-branch: dev
      - # Emulator, binaries for different hardware
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - # Docker build CLI
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - # Build and Push
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./ # starting directory
          file: ./Dockerfile
          push: False # don't push on pull request (in testing phase) ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/app:${{ steps.gitVersion.outputs.version }}

          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/api-snapshot.tar
      - # Save artifact for future runs
        name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: api-snapshot
          path: /tmp/api-snapshot.tar
          retention-days: 1
      - 
        run: echo "New Version ${{ steps.gitVersion.outputs.version }}."
      - 
        run: echo "This job's status is ${{ job.status }}."

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: api-snapshot
          path: /tmp
      -
        name: Run Flake8
        continue-on-error: true
        run: |
          image_name_tag=$(docker load --input /tmp/api-snapshot.tar)
          echo "res = ${image_name_tag:14}"
          docker run -i ${image_name_tag:14} poetry run flake8
      - 
        name: Run SUCCESS script
        run: exit 0

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: api-snapshot
          path: /tmp
      -
        name: Run Pytest
        continue-on-error: true
        run: |
          image_name_tag=$(docker load --input /tmp/api-snapshot.tar)
          echo "res = ${image_name_tag:14}"
          docker run -i ${image_name_tag:14} poetry run pytest
      - 
        name: Run SUCCESS script
        run: exit 0

  deploy:
    if: ${{ github.event_name != 'pull_request' }} # if push to main (anyhow)
    runs-on: ubuntu-latest
    steps:
      - # checks-out our repository under $GITHUB_WORKSPACE, so our workflow can access it.
        name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}   # checkout the source branch of the pull request in a workflow run
          fetch-depth: 0                # fetch the whole repo history
      - 
        name: Git Version
        uses: codacy/git-version@2.5.4
        id: gitVersion
        with:
          release-branch: main
          dev-branch: dev
      - # Login to docker hub
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - # Emulator, binaries for different hardware
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - # Docker build CLI
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - # Build and Push
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./ # starting directory
          file: ./Dockerfile
          push: True # don't push on pull request (in testing phase) ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/app:${{ steps.gitVersion.outputs.version }}
          cache-from: type=gha
      - 
        run: echo "New Version ${{ steps.gitVersion.outputs.version }}."
      - 
        run: echo "This job's status is ${{ job.status }}."