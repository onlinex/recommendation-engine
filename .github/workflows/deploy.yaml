name: Release

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - 'app/**'
      - 'tests/**'

jobs:
  ##################################
  # Check Kustomization complience
  ##################################
  k8sPolicyCheck:
    runs-on: ubuntu-latest
    steps:
      - 
        name: ☁️ Checkout
        uses: actions/checkout@v3
      - 
        name: 📊 Datree
        uses: datreeio/action-datree@main
        with:
          path: '**/*.yaml'
          cliArguments: '--only-k8s-files --ignore-missing-schemas'
        continue-on-error: true
      - 
        name: success
        run: exit 0

  ##################################
  # Check Python code complience
  ##################################
  lint:
    runs-on: ubuntu-latest
    name: Compliance
    steps:
      -
        name: ☁️ Checkout
        uses: actions/checkout@v3
      - 
        name: 🔧 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - 
        name: 🔧 Run
        run: |
          python -m pip install flake8
          flake8 ./app/
        continue-on-error: true
      - 
        name: Run SUCCESS script
        run: exit 0

  ##################################
  # Build, if detect changes in PR
  ##################################
  docker:
    needs: 
      - k8sPolicyCheck
      - lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [app]

    name: Build ${{ matrix.service }}
    steps:
      -
        name: ☁️ Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}  # source branch of PR, to detach: github.event.pull_request.head.sha
          fetch-depth: 0
      - 
        name: 🔧 Version
        uses: codacy/git-version@2.5.4
        with:
          release-branch: main
        id: gitVersion
      -
        name: 🔧 QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: 🔧 Docker Buildx
        uses: docker/setup-buildx-action@v2
      - 
        name: 🔧 Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - 
        name: 🔧 Filter
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - '${{ matrix.service }}/**'
      -
        name: 📦 Build & Save
        if: steps.changes.outputs.src == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          push: False
          file: ./Dockerfile

          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.service }}:${{ steps.gitVersion.outputs.version }}
          outputs: type=docker,dest=/tmp/docker.tar

          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }}
      -
        name: 📂 Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-artifact
          path: /tmp/**.tar
          retention-days: 1
          if-no-files-found: ignore
      -
        run: echo "New version onlinex/${{ matrix.service }}:${{ steps.gitVersion.outputs.version }}"

  ##################################
  # Release
  ##################################

  tag: # feature: or breaking:
    needs:
      - docker
    runs-on: ubuntu-latest
    name: Tag Release
    steps:
      -
        name: ☁️ Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}  # source branch of PR, to detach: github.event.pull_request.head.sha
          fetch-depth: 0
      -
        name: 🔧 Version
        uses: codacy/git-version@2.5.4
        with:
          release-branch: main
        id: gitVersion
      -
        name: 🚀 Tag release
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.gitVersion.outputs.version }}
      -
        run: echo "New Version ${{ steps.gitVersion.outputs.version }}"

  release:
    needs: 
      - docker
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [app]

    name: Release ${{ matrix.service }}
    steps:
      -
        name: ☁️ Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - 
        name: 🔧 Filter
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - '${{ matrix.service }}/**'
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: 🔧 Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        if: steps.changes.outputs.src == 'true'
        name: 📂 Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.service }}-artifact
          path: /tmp
      - 
        if: steps.changes.outputs.src == 'true'
        name: 📦 Load container
        id: container
        run: |
          img=$(docker load --input /tmp/docker.tar)
          docker image ls -a

          echo ::set-output name=docker_tag::${img:14}
      - 
        if: steps.changes.outputs.src == 'true'
        name: 🚀 Release
        run: |
          echo "${{ steps.container.outputs.docker_tag }}"
          docker image push ${{ steps.container.outputs.docker_tag }}


  ##################################
  # Clean
  ##################################

  cleanup:
    if: always()
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - 
        name: "♻️ Remove build artifacts"
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            app-artifact
          failOnError: false